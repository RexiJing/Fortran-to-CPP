C 编写drucker-prager屈服条件的各向同性硬化模型
      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,
     1 RPL,DDSDDT,DRPLDE,DRPLDT,STRAN,DSTRAN,
     2 TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,MATERL,NDI,NSHR,NTENS,
     3 NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,CELENT,
     4 DFGRD0,DFGRD1,NOEL,NPT,KSLAY,KSPT,KSTEP,KINC)
C
      INCLUDE 'ABA_PARAM.INC'
C
      CHARACTER*80 MATERL
      DIMENSION STRESS(NTENS),STATEV(NSTATV),
     1 DDSDDE(NTENS,NTENS),DDSDDT(NTENS),DRPLDE(NTENS),
     2 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),
     3 PROPS(NPROPS),COORDS(3),DROT(3,3),
     4 DFGRD0(3,3),DFGRD1(3,3)
      DIMENSION EELAS(6),EPLAS(6),DSTRES(6),PSTRES(6),DDFDDS(6),ATRT(6),
	1DDQDDS(6),DDQDS(6),DEVIAS(6),NBLFMT(6),R0(6),NBLQR(6),RB(6),IS(6),
     2JS(6),JCOBFZ(6,6),DDBDDS(6,6),DDEDDB(6,6),Q(6,6),R(6,6),D(6,6),
     3C(6,6)
C
	REAL INVAR1,INVAR2,SMISES,AFA,YIELDD,DDFDDJ,FB,FC,NBLFM1,NBLFM2,
	1DNBL,JCOBFM,NBLFZ,BETA,PUSI,NBLFMT,NBLFM,JCOBFZ,
     2DSTRES,PSTRES,DDFDDS,ATRT,DDQDDS,DDQDS,DEVIAS,RB,DDBDDS,
	3DDEDDB,R,Q,NBLQR,R0,D,C
	INTEGER NVALUE,IS,JS,L
C
      PARAMETER(ZERO=0.E0,ONE=1.E0,TWO=2.E0,THREE=3.E0,FOUR=4.E0,
	1SIX=6.E0,ENUMAX=0.499E0,NEWTON=10,TOLER=1.0E-6)
C PROPS(1)-----E
C PROPS(2)-----NU
C PROPS(3)-----BETA
C PROPS(4)-----PUSI,DILATION ANGLE
C PROPS(5..)---SYIELD AND HARDING DATA
C CALLS AHARD FOR CURVE OF YIELD STRESS VS. PLASTIC STRAIN
C ************************************************     
C
C
	NBLFZ=ZERO
	NBLFM1=ZERO
	NBLFM2=ZERO
	JCOBFM=ZERO
      EMOD=PROPS(1)
      ENU=PROPS(2)
	BETA=PROPS(3)
	PUSI=PROPS(4)
C 3K
      EBULK3=EMOD/(ONE-TWO*ENU)
C 2G
      EG2=EMOD/(ONE+ENU)  
      EG=EG2/TWO
      EG3=THREE*EG
      ELAM=(EBULK3-EG2)/THREE
      DO K1=1,NTENS
		DO K2=1,NTENS
			DDSDDE(K1,K2)=ZERO
			JCOBFZ(K1,K2)=ZERO
          END DO
		DSTRES(K1)=ZERO                   
	    DDQDS(K1)=ZERO
		ATRT(K1)=ZERO
		RB(K1)=ZERO
		NBLFMT(K1)=ZERO
      END DO
C ************************************************ ELASTIC STIFFNESS
      DO K1=1,NDI
		DO K2=1,NDI
			DDSDDE(K2,K1)=ELAM
	    END DO
          DDSDDE(K1,K1)=EG2+ELAM
	END DO
	DO K1=NDI+1,NTENS
		DDSDDE(K1,K1)=EG
	END DO
	CALL ROTSIG(STATEV(      1),DROT,EELAS,2,NDI,NSHR)
	CALL ROTSIG(STATEV(NTENS+1),DROT,EPLAS,2,NDI,NSHR)
C 读取等效塑性应变
	DO K1=1,NTENS
		EELAS(K1)=STATEV(K1)
		EPLAS(K1)=STATEV(K1+NTENS)
	END DO
	EQPLAS=STATEV(1+2*NTENS)
c     print*, EELAS(3),EQPLAS
C	WRITE(7,*) EELAS(3),EQPLAS
	DO K1=1,NTENS
		DO K2=1,NTENS
			DSTRES(K2)=DSTRES(K2)+DDSDDE(K2,K1)*DSTRAN(K1)
		END DO
		EELAS(K1)=EELAS(K1)+DSTRAN(K1)
	END DO
	DO K1=1,NTENS
		PSTRES(K1)=STRESS(K1)+DSTRES(K1)
	END DO
	INVAR1=PSTRES(1)+PSTRES(2)+PSTRES(3)
	SMISES=(PSTRES(1)-PSTRES(2))**2+
	1(PSTRES(2)-PSTRES(3))**2+(PSTRES(3)-PSTRES(1))**2
	DO K1=NDI+1,NTENS
		SMISES=SMISES+SIX*PSTRES(K1)**2
	END DO
	INVAR2=SMISES/SIX
	NVALUE=(NPROPS-4)/2
	CALL AHARD(SYIEL0,HARD,EQPLAS,PROPS(5),NVALUE)
	AFA=TAN(BETA)/(THREE*SQRT(THREE))
	YIELDD=(1-TAN(BETA)/THREE)*SYIEL0/SQRT(THREE)
	FB=SQRT(INVAR2)+INVAR1*AFA-YIELDD
C *****************************************************************
C *********************************************************************
C 如果FB<0,弹性,over
C *********************************************************************
	IF(FB.GT.TOLER) THEN
C		CALCULATE DDFDDS AT POINT B
			DDFDDJ=SQRT(1/(4*INVAR2))
			DO K1=1,NDI
				DDFDDS(K1)=AFA+DDFDDJ*(PSTRES(K1)-INVAR1/THREE)
			END DO
			DO K1=NDI+1,NTENS
				DDFDDS(K1)=DDFDDJ*TWO*PSTRES(K1)
			END DO
C		CALCULATE DDQDDS
			DO K1=1,NDI
				DDQDDS(K1)=ONE/(THREE)*TAN(PUSI)
	1			+DDFDDJ*(PSTRES(K1)-INVAR1/THREE)
			END DO
			DO K1=NDI+1,NTENS
				DDQDDS(K1)=DDFDDJ*TWO*PSTRES(K1)
			END DO	
C		CALCULATE [D]{DDQDDS}=DDQDS 
			DO K1=1,NTENS
				DO K2=1,NTENS
					DDQDS(K2)=DDQDS(K2)+DDSDDE(K2,K1)*DDQDDS(K1)
				END DO
			END DO
C		CALCULATE NBLFM2
			B=(DDQDDS(1)-DDQDDS(2))**2+
	1			(DDQDDS(2)-DDQDDS(3))**2+(DDQDDS(3)-DDQDDS(1))**2
			DO K1=NDI+1,NTENS
				B=B+SIX*DDQDDS(K1)**2
              END DO
              B=B/SIX
			B=SQRT(TWO*B/THREE)
			NBLFM2=(ONE-AFA)*HARD*B
C		CALCULATE NBLFM1
			DO K1=1,NTENS
				NBLFM1=NBLFM1+DDFDDS(K1)*DDQDS(K1)
			END DO	
C		CALCULATE DNBL
			DNBL=FB/(NBLFM1+NBLFM2)
C**********************************************************************
C		CALCULATE THE STARTING ESTIMATE STRESS AT POINT C
			DO K1=1,NTENS
				STRESS(K1)=PSTRES(K1)-DNBL*DDQDS(K1)
			END DO
C	WRITE(7,1010) DDQDDS(1),DDQDDS(2),DDQDDS(3),DDQDDS(4),DDQDDS(5),
C	1DDQDDS(6)
1010	FORMAT(//,'DDQDDS1,2,3,4,5,6',6E11.4)
C**********************************************************************
C**********************************************************************
C		DO NEWTON ITERATION FOR THE SATISFIED STRESS
C**********************************************************************
C**********************************************************************
C**********************************************************************
		DO KNEWTON=1,NEWTON
C		CALCULATE INVAR1,INVAR2 AT POINT C
			INVAR1=STRESS(1)+STRESS(2)+STRESS(3)
			SMISES=(STRESS(1)-STRESS(2))**2+
	1			(STRESS(2)-STRESS(3))**2+(STRESS(3)-STRESS(1))**2
			DO K1=NDI+1,NTENS
				SMISES=SMISES+SIX*STRESS(K1)**2
			END DO
			INVAR2=SMISES/SIX
C		CALCULATE DEVIATORIC STRESS
			DO K1=1,NDI
				DEVIAS(K1)=STRESS(K1)-INVAR1/THREE
			END DO
C		CALCULATE DDFDDS
			DDFDDJ=SQRT(1/(4*INVAR2))
			DO K1=1,NDI
				DDFDDS(K1)=AFA+DDFDDJ*DEVIAS(K1)
			END DO
			DO K1=NDI+1,NTENS
				DDFDDS(K1)=DDFDDJ*TWO*STRESS(K1)
			END DO
C		CALCULATE DDQDDS
			DO K1=1,NDI
				DDQDDS(K1)=ONE/(THREE)*TAN(PUSI)+DDFDDJ*DEVIAS(K1)
			END DO
			DO K1=NDI+1,NTENS
				DDQDDS(K1)=DDFDDJ*TWO*STRESS(K1)
			END DO	
C		CALCULATE [D]{DDQDDS}=DDQDS AT POINT C
			DO K1=1,NTENS
				DDQDS(K1)=ZERO
			END DO
			DO K1=1,NTENS
				DO K2=1,NTENS
					DDQDS(K2)=DDQDS(K2)+DDSDDE(K2,K1)*DDQDDS(K1)
				END DO
			END DO
C**************************************************************
C		CALCULATE YIELD SURFACE AND PARAMETERS***************
			B=(DDQDDS(1)-DDQDDS(2))**2+
	1			(DDQDDS(2)-DDQDDS(3))**2+(DDQDDS(3)-DDQDDS(1))**2
			DO K1=NDI+1,NTENS
				B=B+SIX*DDQDDS(K1)**2
              END DO
			B=B/SIX
              B=SQRT(TWO*B/THREE)
			EQPLAS=STATEV(13)+DNBL*B
			CALL AHARD(SYIEL0,HARD,EQPLAS,PROPS(5),NVALUE)
			NBLFM2=(ONE-AFA)*HARD*B
			YIELDD=(1-TAN(BETA)/THREE)*SYIEL0/SQRT(THREE)
			FC=SQRT(INVAR2)+INVAR1*AFA-YIELDD	
C**************************************************************
C**************************************************************
C		CALCULATE Q AND Q(-1)	(RESET Q EQUALS ZERO AT FIRST)	 
C		CALCULATE DDBDDS AT POINT C
			CONST1=SQRT(THREE)/TWO
			CONST2=ONE/SQRT(INVAR2)
			TEMP1=-ONE*CONST2**3/TWO
			TEMP2=TWO*CONST2/THREE
			TEMP3=ONE*CONST2/THREE
			TEMP4=TWO*CONST2
			DO K1=1,NDI
				DDBDDS(K1,K1)=CONST1*(TEMP1*DEVIAS(K1)**2+TEMP2)/SQRT(THREE)
			END DO
			DO K1=NDI+1,NTENS
				DDBDDS(K1,K1)=CONST1*(TEMP1*FOUR*STRESS(K1)**2+TEMP4)/SQRT(THREE)
			END DO
			DDBDDS(1,2)=CONST1*(TEMP1*DEVIAS(1)*DEVIAS(2)+TEMP3)/SQRT(THREE)
			DDBDDS(1,3)=CONST1*(TEMP1*DEVIAS(1)*DEVIAS(3)+TEMP3)/SQRT(THREE)
			DDBDDS(2,3)=CONST1*(TEMP1*DEVIAS(2)*DEVIAS(3)+TEMP3)/SQRT(THREE)
			DDBDDS(2,1)=DDBDDS(1,2)
			DDBDDS(3,1)=DDBDDS(1,3)
			DDBDDS(3,2)=DDBDDS(2,3)
              DDBDDS(1,4)=TEMP1*DEVIAS(1)*STRESS(4)
              DDBDDS(1,5)=TEMP1*DEVIAS(1)*STRESS(5)
              DDBDDS(1,6)=TEMP1*DEVIAS(1)*STRESS(6)
              DDBDDS(2,4)=TEMP1*DEVIAS(2)*STRESS(4)
              DDBDDS(2,6)=TEMP1*DEVIAS(2)*STRESS(6)
              DDBDDS(3,4)=TEMP1*DEVIAS(3)*STRESS(4)
              DDBDDS(3,5)=TEMP1*DEVIAS(3)*STRESS(5)
              DDBDDS(3,6)=TEMP1*DEVIAS(3)*STRESS(6)
              DDBDDS(4,1)=DDBDDS(1,4)
              DDBDDS(5,1)=DDBDDS(1,5)
              DDBDDS(6,1)=DDBDDS(1,6)
              DDBDDS(4,2)=DDBDDS(2,4)
              DDBDDS(5,2)=DDBDDS(2,5)
              DDBDDS(6,2)=DDBDDS(2,6)              
              DDBDDS(4,3)=DDBDDS(3,4)
              DDBDDS(5,3)=DDBDDS(3,5)
              DDBDDS(6,3)=DDBDDS(3,6)              
              DDBDDS(4,5)=TEMP1*TWO*STRESS(4)*STRESS(5)
              DDBDDS(4,6)=TEMP1*TWO*STRESS(4)*STRESS(6)
              DDBDDS(5,6)=TEMP1*TWO*STRESS(5)*STRESS(6)
              DDBDDS(5,4)=DDBDDS(4,5)
              DDBDDS(6,4)=DDBDDS(4,6)
              DDBDDS(6,5)=DDBDDS(5,6)
C		CALCULATE DDSDDE*DDBDDS=DDEDDB AT POINT C
			DO 50 K1=1,NTENS
			DO 50 K2=1,NTENS
				DDEDDB(K1,K2)=ZERO
				DO 10 K3=1,NTENS
					DDEDDB(K1,K2)=DDEDDB(K1,K2)+
	1					DDSDDE(K1,K3)*DDBDDS(K3,K2)
10				CONTINUE
50			CONTINUE
C		CALCULATE Q
			DO K1=1,NTENS
				DO K2=1,NTENS
					Q(K1,K2)=DNBL*DDEDDB(K1,K2)
				END DO
			END DO
			DO K1=1,NTENS
				Q(K1,K1)=Q(K1,K1)+ONE
			END DO
C		CALCULATE THE INVERSE MATRIX*****************************
		CALL BRINV(Q,6,L,IS,JS)
C		AFTER THE CALCULATION, Q REPRESENTS ITS' INVERSE MATRIX
C         CALCULATION OF Q AND Q(-1) COMPLETED**********************
C*******************************************************************
C*******************************************************************
			IF(ABS(FC).LT.TOLER) GO TO 100
C**********TEH UP LINE IS A JUDGEMENT WHETER IT SATISFIED AND END THE LOOP
C**************************************************************
C*		CALCULATE THE CORRECTION OF THE NEXT ITERATION
C*		CALCULATE NBLFM2 AT POINT C,IT HAS BEEN CALCULATED BEFORE
C		CALCULATE DDNBLA NBLFM1，Q(-1)*DDQDS记为NBLFMT
			DO K1=1,NTENS
				NBLFMT(K1)=ZERO
			END DO
			DO K1=1,NTENS
				DO K2=1,NTENS
					NBLFMT(K2)=NBLFMT(K2)+Q(K2,K1)*DDQDS(K1)	                   			
				END DO
			END DO
			NBLFM1=ZERO	
			DO K1=1,NTENS
				NBLFM1=NBLFM1+NBLFMT(K1)*DDFDDS(K1)
			END DO
			NBLFM=NBLFM1+NBLFM2
C		CALCULATE NBLFZ ,RO
			DO K1=1,NTENS
				R0(K1)=STRESS(K1)-PSTRES(K1)+DNBL*DDQDS(K1)
			END DO
C		CALCULATE NBLA FENZI,行列式记为NBLQR
			DO K1=1,NTENS
				NBLQR(K1)=ZERO
			END DO
			DO K1=1,NTENS
				DO K2=1,NTENS
					NBLQR(K2)=NBLQR(K2)+Q(K2,K1)*R0(K1)	
				END DO
			END DO
			NBLFZ=ZERO
			DO K1=1,NTENS
				NBLFZ=NBLFZ+DDFDDS(K1)*NBLQR(K1)
			END DO
			NBLFZ=FC-NBLFZ
C		CALCULATE CNBL,CORRECTION OF NABLA
			CNBL=NBLFZ/NBLFM
C		CALCULATE CORRECTION OF STRESS******************************
C*********************************************************************
			DO K1=1,NTENS
				DSTRES(K1)=-NBLQR(K1)-CNBL*NBLFMT(K1)
			END DO
C		UPDATE STRESS,DNBL AT POINT C IN THIS ITERATION THEN CHECK FC
			DO K1=1,NTENS
				STRESS(K1)=STRESS(K1)+DSTRES(K1)
			END DO	
			DNBL=DNBL+CNBL
		END DO
C
C		WRITE WARNING MESSAGE TO THE .MSG FILE
C
		WRITE(7,2) NEWTON,FC
2			FORMAT(//,'***WARNING-PLASTICITY LAGORITHM DID NOT',
	1		'CONVERGE AFTER',I3,' ITERRATIONS',2X,'FC EQUALS',E11.4)
100		CONTINUE
C
C		UPDATE EELAS,EPLAS
		DO 53 K1=1,NTENS
			EPLAS(K1)=EPLAS(K1)+DNBL*DDQDDS(K1)
			EELAS(K1)=EELAS(K1)-DNBL*DDQDDS(K1)
53		CONTINUE
C
C
C		FORMULATE THE CONSISTENT JACOBIAN                                                                                                                                                                                                                                                                              
C		CALCULATE R
			DO 150 K1=1,NTENS
			DO 150 K2=1,NTENS
				R(K1,K2)=ZERO
				DO 110 K3=1,NTENS
					R(K1,K2)=R(K1,K2)+Q(K1,K3)*DDSDDE(K3,K2)
110				CONTINUE
150			CONTINUE
C		CALCULATE JCOBFZ
			DO K1=1,NTENS
				DO K2=1,NTENS
					ATRT(K2)=ATRT(K2)+R(K2,K1)*DDFDDS(K1)
					RB(K2)=RB(K2)+R(K2,K1)*DDQDDS(K1)
				END DO
			END DO
C
			DO K1=1,NTENS
				DO K2=1,NTENS
					JCOBFZ(K1,K2)=RB(K1)*ATRT(K2)
				END DO
			END DO
C		CALCULATE JCOBFM
			DO K1=1,NTENS
				JCOBFM=JCOBFM+DDFDDS(K1)*RB(K1)
			END DO
			JCOBFM=JCOBFM+NBLFM2
C		CALCULATE JACOBIAN
			DO K1=1,NTENS
				DO K2=1,NTENS
					DDSDDE(K1,K2)=R(K1,K2)-JCOBFZ(K1,K2)/JCOBFM
				END DO 
			END DO
C
C
	ELSE
		DO K1=1,NTENS
			STRESS(K1)=PSTRES(K1)
		END DO	
C
	END IF
C	
C		STORE ELASTIC AND PLASTIC STRAIN
	DO K1=1,NTENS
		STATEV(K1)=EELAS(K1)		
		STATEV(K1+NTENS)=EPLAS(K1)	
	END DO
	STATEV(1+2*NTENS)=EQPLAS
	WRITE(7,1001),EPLAS(1),EPLAS(2),EPLAS(3),EPLAS(4),EPLAS(5),EPLAS(6),
     2 STATEV(1+2*NTENS)
1001	FORMAT(//,2E11.4)
C
	RETURN
	END
C
C
C
C
*****************************************************************************
*****************************************************************************
      SUBROUTINE AHARD(SYIELD,HARD,EQPLAS,TABLE,NVALUE)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION TABLE(2,NVALUE)
C
C    SET YIELD STRESS TO LAST VALUE OF TABLE, HARDENING TO ZERO
      SYIELD=TABLE(1,NVALUE)
      HARD=0.0
C
C   IF MORE THAN ONE ENTRY, SEARCH TABLE
C
      IF(NVALUE.GT.1) THEN
        DO 10 K1=1,NVALUE-1
           EQPL1=TABLE(2,K1+1)
           IF(EQPLAS.LT.EQPL1) THEN
             EQPL0=TABLE(2,K1)
             IF(EQPL1.LE.EQPL0) THEN
                WRITE(6,1)
 1              FORMAT(//,30X,'***ERROR - PLASTIC STRAIN MUST BE ',
     1                 'ENTERED IN ASCENDING ORDER')
                CALL XIT
              ENDIF
C
C           CURRENT YIELD STRESS AND HARDENING
C
            DEQPL=EQPL1-EQPL0
            SYIEL0=TABLE(1,K1)
            SYIEL1=TABLE(1,K1+1)
            DSYIEL=SYIEL1-SYIEL0
            HARD=DSYIEL/DEQPL
            SYIELD=SYIEL0+(EQPLAS-EQPL0)*HARD
            GOTO 20
            ENDIF
 10         CONTINUE
 20         CONTINUE
      ENDIF
      RETURN
      END
C
C
C
	SUBROUTINE BRINV(Q,N,L,IS,JS)
	DIMENSION Q(N,N),IS(N),JS(N)
	REAL Q,T,D
	L=1
	DO 300 K=1,N
		D=0.0
		DO 310 I=K,N
		DO 310 J=K,N
			IF(ABS(Q(I,J)).GT.D) THEN
				D=ABS(Q(I,J))
				IS(K)=I
				JS(K)=J
			END IF
310		CONTINUE
		IF(D+1.0.EQ.1.0)THEN
			L=0
C			WRITE(*,320)
			RETURN 
		END IF
C320		FORMAT(1X,'ERR**NOT INV')
		DO 330 J=1,N
			T=Q(K,J)
			Q(K,J)=Q(IS(K),J)
			Q(IS(K),J)=T
330		CONTINUE
		DO 340 I=1,N
			T=Q(I,K)
			Q(I,K)=Q(I,JS(K))
			Q(I,JS(K))=T
340		CONTINUE
		Q(K,K)=1/Q(K,K)
		DO 350 J=1,N
			IF(J.NE.K)THEN
				Q(K,J)=Q(K,J)*Q(K,K)
			END IF
350		CONTINUE
		DO 370 I=1,N
			IF(I.NE.K)THEN
				DO 360 J=1,N
					IF(J.NE.K)THEN
						Q(I,J)=Q(I,J)-Q(I,K)*Q(K,J)
					END IF
360				CONTINUE
			END IF
370		CONTINUE
		DO 380 I=1,N
			IF(I.NE.K)THEN
				Q(I,K)=-Q(I,K)*Q(K,K)
			END IF
380		CONTINUE
300	CONTINUE
	DO 430 K=N,1,-1
		DO 410 J=1,N
			T=Q(K,J)
			Q(K,J)=Q(JS(K),J)
			Q(JS(K),J)=T
410		CONTINUE
		DO 420 I=1,N
			T=Q(I,K)
			Q(I,K)=Q(I,IS(K))
			Q(I,IS(K))=T
420		CONTINUE
430	CONTINUE
	RETURN
	END
C
C
